<%= form_with(model: @movie, local: true, html: { multipart: true }) do |f| %>
  <div class="form-group">
    <%= f.label :title, t('movies.form.title') %>
    <div class="title-ai-wrapper">
      <%= f.text_field :title, class: "form-control", id: "movie_title" %>
      <button type="button" id="fetch-ai-btn" class="btn btn--secondary fetch-movie">
        ðŸ¤– <%= t('movies.form.fetch_ai') %>
      </button>
    </div>
  </div>

  <div class="form-group">
    <%= f.label :synopsis, t('movies.form.synopsis') %>
    <%= f.text_area :synopsis, rows: 4, class: "form-control", id: "movie_synopsis" %>
  </div>

  <div class="form-group">
    <%= f.label :year, t('movies.form.year') %>
    <%= f.number_field :year, class: "form-control", id: "movie_year" %>
  </div>

  <div class="form-group">
    <%= f.label :duration, t('movies.form.duration') %>
    <%= f.number_field :duration, class: "form-control", id: "movie_duration" %>
  </div>

  <div class="form-group">
    <%= f.label :director, t('movies.form.director') %>
    <%= f.text_field :director, class: "form-control", id: "movie_director" %>
  </div>

  <div class="form-group">
    <%= f.label :categories, t('movies.form.categories') %>
    <div id="categories-list">
      <% Category.all.each do |category| %>
        <div class="form-check" data-category-id="<%= category.id %>">
          <%= check_box_tag "movie[category_ids][]", category.id, @movie.category_ids.include?(category.id), class: "form-check-input" %>
          <%= category.name %>
          <button type="button" class="btn-remove-category" title="Remover" style="margin-left:8px;">âœ•</button>
        </div>
      <% end %>
    </div>
    <div class="new-category-wrapper" style="margin-top: 0.7rem; display: flex; gap: 0.5rem;">
      <%= label_tag :new_category, t('movies.form.add_category') %>
      <%= text_field_tag :new_category, nil, class: "form-control", placeholder: t('movies.form.add_category_placeholder'), autocomplete: "off", id: "new_category_input" %>
      <button type="button" id="add-category-btn" class="btn btn--primary"><%= t('movies.form.add_category_button') %></button>
    </div>
  </div>

  <div class="form-group">
    <%= f.label :tag_list, t('movies.form.tags') %>
    <%= f.text_field :tag_list, value: @movie.tags.pluck(:name).join(", "), class: "form-control", id: "movie_tags" %>
  </div>

  <div class="form-group">
    <%= f.label :poster, t('movies.form.poster') %>
    <%= f.file_field :poster, class: "form-control" %>

    <% if @movie.poster.attached? %>
      <div class="poster-preview">
        <%= image_tag @movie.poster.variant(resize_to_limit: [200, 300]), class: "poster-preview__img" %>
        <div class="form-check">
          <%= f.check_box :remove_poster, class: "form-check-input" %>
          <%= f.label :remove_poster, t('movies.form.remove_poster'), class: "form-check-label" %>
        </div>
      </div>
    <% end %>
  </div>

  <div class="actions">
    <%= f.submit t('movies.form.submit'), class: "btn btn--primary" %>
  </div>
<% end %>

<script>
function setupCategoryForm() {
  var input = document.querySelector('input[name="new_category"]');
  var btn = document.getElementById('add-category-btn');
  var categoriesList = document.getElementById('categories-list');

  if (input) {
    input.onkeydown = null;
    input.addEventListener("keydown", function (e) {
      if (e.key === "Enter") {
        e.preventDefault(); // impede o envio do form
        addCategory(); // chama a funÃ§Ã£o normalmente
      }
    });
  }

  async function addCategory() {
    var name = input.value.trim();
    if (!name) return;
    btn.disabled = true;
    input.disabled = true;
    var locale = (window.location.pathname.match(/^\/(pt|en)\b/) || [])[1] || 'pt';
    var endpoint = "/" + locale + "/categories";
    try {
      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ category: { name: name } })
      });
      const data = await response.json();
      if (data.id) {
        // Verifica se jÃ¡ existe na lista antes de adicionar
        if (!categoriesList.querySelector('[data-category-id="' + data.id + '"]')) {
          var newDiv = document.createElement('div');
          newDiv.className = "form-check";
          newDiv.setAttribute("data-category-id", data.id);
          var checkbox = document.createElement('input');
          checkbox.type = "checkbox";
          checkbox.name = "movie[category_ids][]";
          checkbox.value = data.id;
          checkbox.checked = true;
          checkbox.className = "form-check-input";
          var label = document.createElement('label');
          label.textContent = data.name;
          var removeBtn = document.createElement('button');
          removeBtn.type = "button";
          removeBtn.className = "btn-remove-category";
          removeBtn.title = "Remover";
          removeBtn.style.marginLeft = "8px";
          removeBtn.textContent = "âœ•";
          removeBtn.onclick = function(e) {
            e.preventDefault();
            removeCategory(data.id, newDiv);
          };
          newDiv.appendChild(checkbox);
          newDiv.appendChild(label);
          newDiv.appendChild(removeBtn);
          categoriesList.appendChild(newDiv);
        }
        input.value = "";
      } else if (data.error) {
        alert(data.error);
      }
    } catch {
      alert("Erro ao criar categoria");
    } finally {
      btn.disabled = false;
      input.disabled = false;
    }
  }

  if (btn) {
    btn.onclick = null;
    btn.onclick = function(e) {
      e.preventDefault();
      addCategory();
    };
  }

  function removeCategory(categoryId, element) {
    if (!confirm("Tem certeza que deseja remover esta categoria?")) return;
    var locale = (window.location.pathname.match(/^\/(pt|en)\b/) || [])[1] || 'pt';
    var endpoint = "/" + locale + "/categories/" + categoryId;
    fetch(endpoint, {
      method: "DELETE",
      headers: {
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (response.ok) {
        element.remove();
      } else {
        response.json().then(data => alert(data.error || "Erro ao remover categoria"));
      }
    })
    .catch(() => alert("Erro ao remover categoria"));
  }

  categoriesList.querySelectorAll(".btn-remove-category").forEach(function(btn) {
    btn.onclick = null;
    btn.onclick = function(e) {
      e.preventDefault();
      var parent = btn.closest(".form-check");
      var categoryId = parent.getAttribute("data-category-id");
      removeCategory(categoryId, parent);
    };
  });
}

document.addEventListener("turbo:load", setupCategoryForm);
</script>
